{
  "version": 3,
  "sources": ["../../@web3-react/fortmatic-connector/src/index.ts"],
  "sourcesContent": ["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAIA,IAAMA,mBAAkD;EACtD,GAAG;EACH,GAAG;EACH,GAAG;EACH,IAAI;AAJkD;IAY3CC,qBAAb,SAAA,oBAAA;AAAA,iBAAAA,qBAAA,kBAAA;AAME,WAAAA,oBAAA,MAAA;;QAAcC,SAAAA,KAAAA,QAAQC,UAAAA,KAAAA;AACpB,KAAUC,OAAOC,KAAKL,gBAAZ,EAA8BM,SAASH,QAAQI,SAAR,CAAvC,IAAV,OAAAC,UAAS,OAAA,yBAAoFL,OAApF,IAATK,UAAS,KAAA,IAAT;AACA,YAAA,mBAAA,KAAA,MAAM;MAAEC,mBAAmB,CAACN,OAAD;IAArB,CAAN,KAAA;AAEA,UAAKD,SAASA;AACd,UAAKC,UAAUA;;EAChB;AAZH,MAAA,SAAAF,oBAAA;AAAA,SAceS,WAdf,SAAA,WAAA;AAAA,QAAA;;+BAuB0B,OAAKC,UACxBC,YADmB,EAEnBC,OAFmB,EAGnBC,KAAK,SAACC,UAAD;AAAA,iBAAgCA,SAAS;QAAzC,CAHc,CAAA,EAAA,KAAA,SAAhBC,SAAAA;AAKN,iBAAO;YAAEC,UAAU,OAAKN,UAAUC,YAAf;YAA8BT,SAAS,OAAKA;YAASa;UAAjE;;;mBAbF;;YAAD,CAAC,OAAKL,WAAAA;iCACgB,OAAO,2BAAaG,KAAK,SAAAI,GAAC;AAAA,gBAAA;AAAA,oBAAA,aAAIA,KAAJ,OAAA,SAAIA,EAAC,eAAL,OAAA,aAAkBA;UAAlB,CAA1B,CAAA,EAAA,KAAA,SAAlBC,WAAAA;AACN,mBAAKR,YAAY,IAAIQ,UACnB,OAAKjB,QACL,OAAKC,YAAY,KAAK,OAAKA,YAAY,IAAIiB,SAAYpB,iBAAiB,OAAKG,QAF9D;;;;;IAYpB,SA7BH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SA+BeS,cA/Bf,SAAA,cAAA;AAAA,QAAA;mBAgCW;AAAP,aAAA,QAAA,QAAO,OAAKD,UAAUC,YAAf,CAAP;IACD,SAjCH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAmCeS,aAnCf,SAAA,aAAA;AAAA,QAAA;mBAoCW;AAAP,aAAA,QAAA,QAAO,OAAKlB,OAAZ;IACD,SArCH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAuCemB,aAvCf,SAAA,aAAA;AAAA,QAAA;mBAwCW;AAAP,aAAA,QAAA,QAAO,OAAKX,UACTC,YADI,EAEJW,KAAK,cAFD,EAGJT,KAAK,SAACC,UAAD;AAAA,eAAgCA,SAAS;MAAzC,CAHD,CAAP;IAID,SA5CH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SA8CSS,aAAA,SAAA,aAAA;EAAA;AA9CT,SAgDeC,QAhDf,SAAA,QAAA;AAAA,QAAA;oBAiDU;6BAAA,QAAKd,UAAUe,KAAKC,OAApB,CAAA,EAAA,KAAA,WAAA;AACN,gBAAKC,eAAL;;IACD,SAnDH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAAA3B;AAAA,EAAwC4B,iBAAxC;",
  "names": ["chainIdToNetwork", "FortmaticConnector", "apiKey", "chainId", "Object", "keys", "includes", "toString", "invariant", "supportedChainIds", "activate", "fortmatic", "getProvider", "enable", "then", "accounts", "account", "provider", "m", "Fortmatic", "undefined", "getChainId", "getAccount", "send", "deactivate", "close", "user", "logout", "emitDeactivate", "AbstractConnector"]
}
