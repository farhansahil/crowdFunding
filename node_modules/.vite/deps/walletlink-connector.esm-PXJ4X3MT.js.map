{
  "version": 3,
  "sources": ["../../@web3-react/walletlink-connector/src/index.ts"],
  "sourcesContent": ["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const CoinbaseWalletSDK = await import('@coinbase/wallet-sdk').then(m => m?.default ?? m)\n      this.walletLink = new CoinbaseWalletSDK({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"],
  "mappings": "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",
  "names": ["CHAIN_ID", "WalletLinkConnector", "url", "appName", "appLogoUrl", "darkMode", "supportedChainIds", "handleChainChanged", "bind", "handleAccountsChanged", "activate", "provider", "request", "method", "accounts", "account", "on", "window", "ethereum", "isCoinbaseWallet", "walletLink", "then", "m", "CoinbaseWalletSDK", "makeWeb3Provider", "getProvider", "getChainId", "chainId", "getAccount", "deactivate", "removeListener", "close", "emitDeactivate", "console", "log", "emitUpdate", "AbstractConnector"]
}
