{
  "version": 3,
  "sources": ["../../@web3-react/torus-connector/src/index.ts"],
  "sourcesContent": ["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.request({ method: 'eth_accounts' }).then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.torus = undefined\n    this.emitDeactivate()\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;IAUaA,iBAAb,SAAA,oBAAA;AAAA,iBAAAA,iBAAA,kBAAA;AAQE,WAAAA,gBAAA,MAAA;;QAAcC,UAAAA,KAAAA,iCAASC,aAAAA,cAAAA,qBAAAA,SAAc,CAAA,IAAA,+CAAIC,oBAAAA,qBAAAA,0BAAAA,SAAqB,CAAA,IAAA,gDAAIC,cAAAA,eAAAA,sBAAAA,SAAe,CAAA,IAAA;AAC/E,YAAA,mBAAA,KAAA,MAAM;MAAEC,mBAAmB,CAACJ,OAAD;IAArB,CAAN,KAAA;AAEA,UAAKA,UAAUA;AACf,UAAKC,cAAcA;AACnB,UAAKC,qBAAqBA;AAC1B,UAAKC,eAAeA;;EACrB;AAfH,MAAA,SAAAJ,gBAAA;AAAA,SAiBeM,WAjBf,SAAA,WAAA;AAAA,QAAA;mBAkBS;;+BAMiB,OAAKC,MAAMC,MAAM,OAAKJ,YAAtB,EAAoCK,KAAK,SAACC,UAAD;AAAA,iBAAgCA,SAAS;QAAzC,CAAzC,CAAA,EAAA,KAAA,SAAhBC,SAAAA;AAEN,iBAAO;YAAEC,UAAU,OAAKL,MAAMK;YAAUD;UAAjC;;;;YARH,CAAC,OAAKJ,OAAAA;iCACY,OAAO,2BAA0BE,KAAK,SAAAI,GAAC;AAAA,gBAAA;AAAA,oBAAA,aAAIA,KAAJ,OAAA,SAAIA,EAAC,eAAL,OAAA,aAAkBA;UAAlB,CAAvC,CAAA,EAAA,KAAA,SAAdC,OAAAA;AACN,mBAAKP,QAAQ,IAAIO,MAAM,OAAKX,kBAAf;mCACP,OAAKI,MAAMQ,KAAK,OAAKb,WAArB,CAAA,EAAA,KAAA,WAAA;YAAA,CAAA;;;;;IAMT,SA3BH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SA6Bec,cA7Bf,SAAA,cAAA;AAAA,QAAA;mBA8BW;AAAP,aAAA,QAAA,QAAO,OAAKT,MAAMK,QAAlB;IACD,SA/BH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAiCeK,aAjCf,SAAA,aAAA;AAAA,QAAA;mBAkCW;AAAP,aAAA,QAAA,QAAO,OAAKhB,OAAZ;IACD,SAnCH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAqCeiB,aArCf,SAAA,aAAA;AAAA,QAAA;mBAsCW;AAAP,aAAA,QAAA,QAAO,OAAKX,MAAMY,SAASC,QAAQ;QAAEC,QAAQ;MAAV,CAA5B,EAAwDZ,KAAK,SAACC,UAAD;AAAA,eAAgCA,SAAS;MAAzC,CAA7D,CAAP;IACD,SAvCH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAyCeY,aAzCf,SAAA,aAAA;;EAyC8B;AAzC9B,SA2CeC,QA3Cf,SAAA,QAAA;AAAA,QAAA;oBA4CU;6BAAA,QAAKhB,MAAMiB,QAAX,CAAA,EAAA,KAAA,WAAA;AACN,gBAAKjB,QAAQkB;AACb,gBAAKC,eAAL;;IACD,SA/CH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAAA1B;AAAA,EAAoC2B,iBAApC;",
  "names": ["TorusConnector", "chainId", "initOptions", "constructorOptions", "loginOptions", "supportedChainIds", "activate", "torus", "login", "then", "accounts", "account", "provider", "m", "Torus", "init", "getProvider", "getChainId", "getAccount", "ethereum", "request", "method", "deactivate", "close", "cleanUp", "undefined", "emitDeactivate", "AbstractConnector"]
}
