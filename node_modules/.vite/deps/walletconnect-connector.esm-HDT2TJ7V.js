import {
  AbstractConnector
} from "./chunk-IGENY7QT.js";
import "./chunk-E4YFJ4DO.js";
import "./chunk-LPPLLAJT.js";
import "./chunk-IKJM6GHQ.js";

// node_modules/@web3-react/walletconnect-connector/dist/walletconnect-connector.esm.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
var URI_AVAILABLE = "URI_AVAILABLE";
var UserRejectedRequestError = function(_Error) {
  _inheritsLoose(UserRejectedRequestError2, _Error);
  function UserRejectedRequestError2() {
    var _this;
    _this = _Error.call(this) || this;
    _this.name = _this.constructor.name;
    _this.message = "The user rejected the request.";
    return _this;
  }
  return UserRejectedRequestError2;
}(_wrapNativeSuper(Error));
function getSupportedChains(_ref) {
  var supportedChainIds = _ref.supportedChainIds, rpc = _ref.rpc;
  if (supportedChainIds) {
    return supportedChainIds;
  }
  return rpc ? Object.keys(rpc).map(function(k) {
    return Number(k);
  }) : void 0;
}
var WalletConnectConnector = function(_AbstractConnector) {
  _inheritsLoose(WalletConnectConnector2, _AbstractConnector);
  function WalletConnectConnector2(config) {
    var _this2;
    _this2 = _AbstractConnector.call(this, {
      supportedChainIds: getSupportedChains(config)
    }) || this;
    _this2.config = config;
    _this2.handleChainChanged = _this2.handleChainChanged.bind(_assertThisInitialized(_this2));
    _this2.handleAccountsChanged = _this2.handleAccountsChanged.bind(_assertThisInitialized(_this2));
    _this2.handleDisconnect = _this2.handleDisconnect.bind(_assertThisInitialized(_this2));
    return _this2;
  }
  var _proto = WalletConnectConnector2.prototype;
  _proto.handleChainChanged = function handleChainChanged(chainId) {
    if (true) {
      console.log("Handling 'chainChanged' event with payload", chainId);
    }
    this.emitUpdate({
      chainId
    });
  };
  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {
    if (true) {
      console.log("Handling 'accountsChanged' event with payload", accounts);
    }
    this.emitUpdate({
      account: accounts[0]
    });
  };
  _proto.handleDisconnect = function handleDisconnect() {
    if (true) {
      console.log("Handling 'disconnect' event");
    }
    if (this.walletConnectProvider) {
      this.walletConnectProvider.removeListener("chainChanged", this.handleChainChanged);
      this.walletConnectProvider.removeListener("accountsChanged", this.handleAccountsChanged);
      this.walletConnectProvider = void 0;
    }
    this.emitDeactivate();
  };
  _proto.activate = function activate() {
    try {
      var _this4 = this;
      var _temp5 = function _temp52() {
        function _temp2() {
          var account;
          return Promise.resolve(new Promise(function(resolve, reject) {
            var userReject = function userReject2() {
              _this4.walletConnectProvider = void 0;
              reject(new UserRejectedRequestError());
            };
            _this4.walletConnectProvider.connector.on("disconnect", function() {
              if (!account) {
                userReject();
              }
            });
            _this4.walletConnectProvider.enable().then(function(accounts) {
              return resolve(accounts[0]);
            })["catch"](function(error) {
              if (error.message === "User closed modal") {
                userReject();
                return;
              }
              reject(error);
            });
          })["catch"](function(err) {
            throw err;
          })).then(function(_Promise$catch) {
            account = _Promise$catch;
            _this4.walletConnectProvider.on("disconnect", _this4.handleDisconnect);
            _this4.walletConnectProvider.on("chainChanged", _this4.handleChainChanged);
            _this4.walletConnectProvider.on("accountsChanged", _this4.handleAccountsChanged);
            return {
              provider: _this4.walletConnectProvider,
              account
            };
          });
        }
        var _temp = function() {
          if (!_this4.walletConnectProvider.connector.connected) {
            return Promise.resolve(_this4.walletConnectProvider.connector.createSession(_this4.config.chainId ? {
              chainId: _this4.config.chainId
            } : void 0)).then(function() {
              _this4.emit(URI_AVAILABLE, _this4.walletConnectProvider.connector.uri);
            });
          }
        }();
        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);
      };
      var _temp6 = function() {
        if (!_this4.walletConnectProvider) {
          return Promise.resolve(import("./esm-APADHFPV.js").then(function(m) {
            var _m$default;
            return (_m$default = m == null ? void 0 : m["default"]) != null ? _m$default : m;
          })).then(function(WalletConnectProvider) {
            _this4.walletConnectProvider = new WalletConnectProvider(_this4.config);
          });
        }
      }();
      return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(_temp5) : _temp5(_temp6));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getProvider = function getProvider() {
    try {
      var _this6 = this;
      return Promise.resolve(_this6.walletConnectProvider);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getChainId = function getChainId() {
    try {
      var _this8 = this;
      return Promise.resolve(_this8.walletConnectProvider.chainId);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getAccount = function getAccount() {
    try {
      var _this10 = this;
      return Promise.resolve(_this10.walletConnectProvider.accounts).then(function(accounts) {
        return accounts[0];
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.deactivate = function deactivate() {
    if (this.walletConnectProvider) {
      this.walletConnectProvider.removeListener("disconnect", this.handleDisconnect);
      this.walletConnectProvider.removeListener("chainChanged", this.handleChainChanged);
      this.walletConnectProvider.removeListener("accountsChanged", this.handleAccountsChanged);
      this.walletConnectProvider.disconnect();
    }
  };
  _proto.close = function close() {
    try {
      var _this12 = this;
      _this12.emitDeactivate();
      return Promise.resolve();
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return WalletConnectConnector2;
}(AbstractConnector);
export {
  URI_AVAILABLE,
  UserRejectedRequestError,
  WalletConnectConnector
};
//# sourceMappingURL=walletconnect-connector.esm-HDT2TJ7V.js.map
