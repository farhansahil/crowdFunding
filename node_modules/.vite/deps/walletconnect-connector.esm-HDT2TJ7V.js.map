{
  "version": 3,
  "sources": ["../../@web3-react/walletconnect-connector/src/index.ts"],
  "sourcesContent": ["import WalletConnectProvider from '@walletconnect/ethereum-provider'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  public walletConnectProvider?: WalletConnectProvider\n  private readonly config: WalletConnectConnectorArguments\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.connector.connected) {\n      await this.walletConnectProvider.connector.createSession(\n        this.config.chainId ? { chainId: this.config.chainId } : undefined\n      )\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.connector.uri)\n    }\n\n    let account: string\n    account = await new Promise<string>((resolve, reject) => {\n      const userReject = () => {\n        // Erase the provider manually\n        this.walletConnectProvider = undefined\n        reject(new UserRejectedRequestError())\n      }\n\n      // Workaround to bubble up the error when user reject the connection\n      this.walletConnectProvider!.connector.on('disconnect', () => {\n        // Check provider has not been enabled to prevent this event callback from being called in the future\n        if (!account) {\n          userReject()\n        }\n      })\n\n      this.walletConnectProvider!.enable()\n        .then((accounts: string[]) => resolve(accounts[0]))\n        .catch((error: Error): void => {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            userReject()\n            return\n          }\n          reject(error)\n        })\n    }).catch(err => {\n      throw err\n    })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider!.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider!.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKaA,gBAAgB;IAMhBC,2BAAb,SAAA,QAAA;AAAA,iBAAAA,2BAAA,MAAA;AACE,WAAAA,4BAAA;;AACE,YAAA,OAAA,KAAA,IAAA,KAAA;AACA,UAAKC,OAAO,MAAKC,YAAYD;AAC7B,UAAKE,UAAU;;EAChB;AALH,SAAAH;AAAA,EAAA,iBAA8CI,KAA9C,CAAA;AAQA,SAASC,mBAAT,MAAA;MAA8BC,oBAAAA,KAAAA,mBAAmBC,MAAAA,KAAAA;AAC/C,MAAID,mBAAmB;AACrB,WAAOA;EACR;AAED,SAAOC,MAAMC,OAAOC,KAAKF,GAAZ,EAAiBG,IAAI,SAAAC,GAAC;AAAA,WAAIC,OAAOD,CAAD;EAAV,CAAtB,IAAuCE;AACrD;IAEYC,yBAAb,SAAA,oBAAA;AAAA,iBAAAA,yBAAA,kBAAA;AAIE,WAAAA,wBAAYC,QAAZ;;AACE,aAAA,mBAAA,KAAA,MAAM;MAAET,mBAAmBD,mBAAmBU,MAAD;IAAvC,CAAN,KAAA;AACA,WAAKA,SAASA;AAEd,WAAKC,qBAAqB,OAAKA,mBAAmBC,KAAxB,uBAAA,MAAA,CAAA;AAC1B,WAAKC,wBAAwB,OAAKA,sBAAsBD,KAA3B,uBAAA,MAAA,CAAA;AAC7B,WAAKE,mBAAmB,OAAKA,iBAAiBF,KAAtB,uBAAA,MAAA,CAAA;;EACzB;AAXH,MAAA,SAAAH,wBAAA;AAAA,SAaUE,qBAAA,SAAA,mBAAmBI,SAAnB;AACN,QAAA,MAAa;AACXC,cAAQC,IAAI,8CAA8CF,OAA1D;IACD;AACD,SAAKG,WAAW;MAAEH;IAAF,CAAhB;EACD;AAlBH,SAoBUF,wBAAA,SAAA,sBAAsBM,UAAtB;AACN,QAAA,MAAa;AACXH,cAAQC,IAAI,iDAAiDE,QAA7D;IACD;AACD,SAAKD,WAAW;MAAEE,SAASD,SAAS;IAApB,CAAhB;EACD;AAzBH,SA2BUL,mBAAA,SAAA,mBAAA;AACN,QAAA,MAAa;AACXE,cAAQC,IAAI,6BAAZ;IACD;AAED,QAAI,KAAKI,uBAAuB;AAC9B,WAAKA,sBAAsBC,eAAe,gBAAgB,KAAKX,kBAA/D;AACA,WAAKU,sBAAsBC,eAAe,mBAAmB,KAAKT,qBAAlE;AACA,WAAKQ,wBAAwBb;IAC9B;AACD,SAAKe,eAAL;EACD;AAtCH,SAwCeC,WAxCf,SAAA,WAAA;AAAA,QAAA;mBAyCS;;;AAaL,cAAIJ;iCACY,IAAIK,QAAgB,SAACC,SAASC,QAAV;AAClC,gBAAMC,aAAa,SAAbA,cAAa;AAEjB,qBAAKP,wBAAwBb;AAC7BmB,qBAAO,IAAIhC,yBAAJ,CAAD;YACP;AAGD,mBAAK0B,sBAAuBQ,UAAUC,GAAG,cAAc,WAAA;AAErD,kBAAI,CAACV,SAAS;AACZQ,2BAAU;cACX;YACF,CALD;AAOA,mBAAKP,sBAAuBU,OAA5B,EACGC,KAAK,SAACb,UAAD;AAAA,qBAAwBO,QAAQP,SAAS,EAAV;YAA/B,CADR,EAAA,SAES,SAACc,OAAD;AAEL,kBAAIA,MAAMnC,YAAY,qBAAqB;AACzC8B,2BAAU;AACV;cACD;AACDD,qBAAOM,KAAD;YACP,CATH;UAUD,CAzBe,EAAA,SAyBP,SAAAC,KAAG;AACV,kBAAMA;UACP,CA3Be,CAAA,EAAA,KAAA,SAAA,gBAAA;AAAhBd,sBAAO;AA6BP,mBAAKC,sBAAsBS,GAAG,cAAc,OAAKhB,gBAAjD;AACA,mBAAKO,sBAAsBS,GAAG,gBAAgB,OAAKnB,kBAAnD;AACA,mBAAKU,sBAAsBS,GAAG,mBAAmB,OAAKjB,qBAAtD;AAEA,mBAAO;cAAEsB,UAAU,OAAKd;cAAuBD;YAAxC;;;;cAzCH,CAAC,OAAKC,sBAAsBQ,UAAUO,WAAAA;mCAClC,OAAKf,sBAAsBQ,UAAUQ,cACzC,OAAK3B,OAAOK,UAAU;cAAEA,SAAS,OAAKL,OAAOK;YAAvB,IAAmCP,MADrD,CAAA,EAAA,KAAA,WAAA;AAGN,qBAAK8B,KAAK5C,eAAe,OAAK2B,sBAAsBQ,UAAUU,GAA9D;;;;;;;YAVE,CAAC,OAAKlB,uBAAAA;iCAC4B,OAAO,qBAAoCW,KAAK,SAAAQ,GAAC;AAAA,gBAAA;AAAA,oBAAA,aAAIA,KAAJ,OAAA,SAAIA,EAAC,eAAL,OAAA,aAAkBA;UAAlB,CAAjD,CAAA,EAAA,KAAA,SAA9BC,uBAAAA;AACN,mBAAKpB,wBAAwB,IAAIoB,sBAAsB,OAAK/B,MAA/B;;;;;IA8ChC,SAzFH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SA2FegC,cA3Ff,SAAA,cAAA;AAAA,QAAA;mBA4FW;AAAP,aAAA,QAAA,QAAO,OAAKrB,qBAAZ;IACD,SA7FH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SA+FesB,aA/Ff,SAAA,aAAA;AAAA,QAAA;mBAgG2B;AAAvB,aAAOlB,QAAQC,QAAQ,OAAKL,sBAAuBN,OAA5C;IACR,SAjGH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAmGe6B,aAnGf,SAAA,aAAA;AAAA,QAAA;oBAoG2B;AAAvB,aAAOnB,QAAQC,QAAQ,QAAKL,sBAAuBF,QAA5C,EAAsDa,KAAK,SAACb,UAAD;AAAA,eAAgCA,SAAS;MAAzC,CAA3D;IACR,SArGH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAuGS0B,aAAA,SAAA,aAAA;AACL,QAAI,KAAKxB,uBAAuB;AAC9B,WAAKA,sBAAsBC,eAAe,cAAc,KAAKR,gBAA7D;AACA,WAAKO,sBAAsBC,eAAe,gBAAgB,KAAKX,kBAA/D;AACA,WAAKU,sBAAsBC,eAAe,mBAAmB,KAAKT,qBAAlE;AACA,WAAKQ,sBAAsByB,WAA3B;IACD;EACF;AA9GH,SAgHeC,QAhHf,SAAA,QAAA;AAAA,QAAA;oBAiHI;AAAA,cAAKxB,eAAL;;IACD,SAlHH,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA,SAAAd;AAAA,EAA4CuC,iBAA5C;",
  "names": ["URI_AVAILABLE", "UserRejectedRequestError", "name", "constructor", "message", "Error", "getSupportedChains", "supportedChainIds", "rpc", "Object", "keys", "map", "k", "Number", "undefined", "WalletConnectConnector", "config", "handleChainChanged", "bind", "handleAccountsChanged", "handleDisconnect", "chainId", "console", "log", "emitUpdate", "accounts", "account", "walletConnectProvider", "removeListener", "emitDeactivate", "activate", "Promise", "resolve", "reject", "userReject", "connector", "on", "enable", "then", "error", "err", "provider", "connected", "createSession", "emit", "uri", "m", "WalletConnectProvider", "getProvider", "getChainId", "getAccount", "deactivate", "disconnect", "close", "AbstractConnector"]
}
