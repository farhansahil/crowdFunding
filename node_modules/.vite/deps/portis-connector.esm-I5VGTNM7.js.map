{
  "version": 3,
  "sources": ["../../@web3-react/portis-connector/src/index.ts"],
  "sourcesContent": ["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  1337: 'devChain',\n  31337: 'hardhat',\n  137: 'matic',\n  80001: 'maticMumbai'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"],
  "mappings": "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",
  "names": ["chainIdToNetwork", "PortisConnector", "dAppId", "networks", "config", "chainIds", "map", "n", "Number", "chainId", "every", "c", "invariant", "supportedChainIds", "handleOnLogout", "bind", "handleOnActiveWalletChanged", "handleOnError", "console", "log", "emitDeactivate", "account", "emitUpdate", "error", "emitError", "activate", "portis", "onLogout", "onActiveWalletChanged", "onError", "provider", "enable", "then", "accounts", "m", "Portis", "getProvider", "getChainId", "send", "getAccount", "deactivate", "changeNetwork", "newNetwork", "isGasRelayEnabled", "close", "logout", "AbstractConnector"]
}
